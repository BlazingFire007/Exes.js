{
  "version": 3,
  "sources": ["../../src/board.ts", "../../src/engine.ts", "../../src/index.ts"],
  "sourcesContent": ["import { Options, Stone, Move, Position } from './types';\n\nconst defaults = {\n  width: 3,\n  height: 3,\n  winLength: 3,\n  turn: 1 as Stone,\n};\n\nexport class Board {\n  width: number;\n  height: number;\n  size: number;\n  winLength: number;\n  internal: Stone[];\n  turn: Stone;\n  constructor(options?: Options) {\n    if (!options) options = defaults;\n    this.width = options.width;\n    this.height = options.height;\n    this.size = options.width * options.height;\n    this.winLength = options.winLength;\n    this.turn = options.turn;\n    this.internal = [...Array(this.size)].map(() => -1);\n    return this;\n  }\n  get moves() {\n    return this.internal.reduce((acc, stone, index) => {\n      if (stone === -1) acc.push(index);\n      return acc;\n    }, [] as number[]);\n  }\n\n  get winner(): Stone {\n    const { width, height, winLength } = this;\n    const { internal } = this;\n    const check = (x: number, y: number, dx: number, dy: number) => {\n      const first = internal[x + y * width];\n      if (first === -1) return -1;\n      for (let i = 1; i < winLength; i++) {\n        const stone = internal[x + dx * i + (y + dy * i) * width];\n        if (stone !== first) return -1;\n      }\n      return first;\n    };\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        if (x <= width - winLength) {\n          const winner = check(x, y, 1, 0);\n          if (winner !== -1) return winner;\n        }\n        if (y <= height - winLength) {\n          const winner = check(x, y, 0, 1);\n          if (winner !== -1) return winner;\n        }\n        if (x <= width - winLength && y <= height - winLength) {\n          const winner = check(x, y, 1, 1);\n          if (winner !== -1) return winner;\n        }\n        if (x >= winLength - 1 && y <= height - winLength) {\n          const winner = check(x, y, -1, 1);\n          if (winner !== -1) return winner;\n        }\n      }\n    }\n    return -1;\n  }\n\n  get isDraw(): boolean {\n    return this.winner === -1 && this.moves.length === 0;\n  }\n\n  get isOver(): boolean {\n    return this.winner !== -1 || this.isDraw;\n  }\n\n  move(move: Move): boolean {\n    if (typeof move === 'number') {\n      if (this.internal[move] !== -1) return false;\n      this.internal[move] = this.turn;\n      this.turn ^= 1;\n      return true;\n    }\n    const { row, col } = move;\n    if (this.internal[row * this.width + col] !== -1) return false;\n    this.internal[row * this.width + col] = this.turn;\n    this.turn ^= 1;\n    return true;\n  }\n\n  undo(pos: Position): void {\n    this.internal[pos] = -1;\n    this.turn ^= 1;\n  }\n\n  load(moves: Position[]): void {\n    moves.forEach((move) => this.move(move));\n  }\n\n  print(): void {\n    const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n    const output = this.internal.map((stone) => {\n      switch (stone) {\n        case -1:\n          return ' ';\n        case 0:\n          return 'O';\n        case 1:\n          return 'X';\n      }\n    });\n    for (let i = 0; i < this.height; i++) {\n      console.log(\n        `|${((this.height - i).toString() + '|: ').padEnd(5)}|${output\n          .slice(i * this.width, (i + 1) * this.width)\n          .join('|')}|`,\n      );\n    }\n    let str = '';\n    const gap = '      ';\n\n    str += gap + '-'.repeat(this.width * 2 + 1) + '\\n';\n    str += gap + '|' + alphabet.slice(0, this.width).join('|') + '|\\n';\n    console.log(str);\n    console.log(`Turn: ${this.turn === 0 ? 'O' : 'X'}`);\n  }\n}\n\nexport default Board;\n", "import { Board, Position } from './types';\nexport function search(b: Board, depth: number) {\n  const moves = shuffle(b.moves);\n  let bestScore = -Infinity;\n  let bestMove = moves[0];\n\n  let alpha = -Infinity;\n  let beta = Infinity;\n\n  for (const move of moves) {\n    b.move(move);\n    const score = -negamax(b, depth - 1, -beta, -alpha);\n    b.undo(move);\n    if (score > bestScore) {\n      bestScore = score;\n      bestMove = move;\n    }\n  }\n  return bestMove;\n}\n\nfunction negamax(board: Board, depth: number, alpha: number, beta: number): number {\n  if (board.isOver || depth === 0) {\n    if (board.winner === -1) return 0;\n    else {\n      return board.winner === board.turn ? 100 : -100;\n    }\n  }\n  let bestScore = -Infinity;\n  for (const move of board.moves) {\n    board.move(move);\n    const score = -negamax(board, depth - 1, -beta, -alpha);\n    board.undo(move);\n    bestScore = Math.max(score, bestScore);\n    alpha = Math.max(alpha, score);\n    if (alpha >= beta) break;\n  }\n  return bestScore;\n}\n\nfunction shuffle(moves: Position[]) {\n  for (let i = moves.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [moves[i], moves[j]] = [moves[j], moves[i]];\n  }\n  return moves;\n}\n\nexport default search;\n", "import Board from './board';\nimport search from './engine';\nexport { Board } from './board';\nexport { search } from './engine';\nconst Game = {\n  Board: Board,\n  search: search,\n};\n\nexport default Game;\n"],
  "mappings": "wKAEA,IAAMA,EAAW,CACf,MAAO,EACP,OAAQ,EACR,UAAW,EACX,KAAM,CACR,EAEaC,EAAN,KAAY,CAOjB,YAAYC,EAAmB,CAN/BC,EAAA,cACAA,EAAA,eACAA,EAAA,aACAA,EAAA,kBACAA,EAAA,iBACAA,EAAA,aAEE,OAAKD,IAASA,EAAUF,GACxB,KAAK,MAAQE,EAAQ,MACrB,KAAK,OAASA,EAAQ,OACtB,KAAK,KAAOA,EAAQ,MAAQA,EAAQ,OACpC,KAAK,UAAYA,EAAQ,UACzB,KAAK,KAAOA,EAAQ,KACpB,KAAK,SAAW,CAAC,GAAG,MAAM,KAAK,IAAI,CAAC,EAAE,IAAI,IAAM,EAAE,EAC3C,IACT,CACA,IAAI,OAAQ,CACV,OAAO,KAAK,SAAS,OAAO,CAACE,EAAKC,EAAOC,KACnCD,IAAU,IAAID,EAAI,KAAKE,CAAK,EACzBF,GACN,CAAC,CAAa,CACnB,CAEA,IAAI,QAAgB,CAClB,GAAM,CAAE,MAAAG,EAAO,OAAAC,EAAQ,UAAAC,CAAU,EAAI,KAC/B,CAAE,SAAAC,CAAS,EAAI,KACfC,EAAQ,CAACC,EAAWC,EAAWC,EAAYC,IAAe,CAC9D,IAAMC,EAAQN,EAASE,EAAIC,EAAIN,GAC/B,GAAIS,IAAU,GAAI,MAAO,GACzB,QAASC,EAAI,EAAGA,EAAIR,EAAWQ,IAE7B,GADcP,EAASE,EAAIE,EAAKG,GAAKJ,EAAIE,EAAKE,GAAKV,KACrCS,EAAO,MAAO,GAE9B,OAAOA,CACT,EACA,QAASH,EAAI,EAAGA,EAAIL,EAAQK,IAC1B,QAASD,EAAI,EAAGA,EAAIL,EAAOK,IAAK,CAC9B,GAAIA,GAAKL,EAAQE,EAAW,CAC1B,IAAMS,EAASP,EAAMC,EAAGC,EAAG,EAAG,CAAC,EAC/B,GAAIK,IAAW,GAAI,OAAOA,CAC5B,CACA,GAAIL,GAAKL,EAASC,EAAW,CAC3B,IAAMS,EAASP,EAAMC,EAAGC,EAAG,EAAG,CAAC,EAC/B,GAAIK,IAAW,GAAI,OAAOA,CAC5B,CACA,GAAIN,GAAKL,EAAQE,GAAaI,GAAKL,EAASC,EAAW,CACrD,IAAMS,EAASP,EAAMC,EAAGC,EAAG,EAAG,CAAC,EAC/B,GAAIK,IAAW,GAAI,OAAOA,CAC5B,CACA,GAAIN,GAAKH,EAAY,GAAKI,GAAKL,EAASC,EAAW,CACjD,IAAMS,EAASP,EAAMC,EAAGC,EAAG,GAAI,CAAC,EAChC,GAAIK,IAAW,GAAI,OAAOA,CAC5B,CACF,CAEF,MAAO,EACT,CAEA,IAAI,QAAkB,CACpB,OAAO,KAAK,SAAW,IAAM,KAAK,MAAM,SAAW,CACrD,CAEA,IAAI,QAAkB,CACpB,OAAO,KAAK,SAAW,IAAM,KAAK,MACpC,CAEA,KAAKC,EAAqB,CACxB,GAAI,OAAOA,GAAS,SAClB,OAAI,KAAK,SAASA,KAAU,GAAW,IACvC,KAAK,SAASA,GAAQ,KAAK,KAC3B,KAAK,MAAQ,EACN,IAET,GAAM,CAAE,IAAAC,EAAK,IAAAC,CAAI,EAAIF,EACrB,OAAI,KAAK,SAASC,EAAM,KAAK,MAAQC,KAAS,GAAW,IACzD,KAAK,SAASD,EAAM,KAAK,MAAQC,GAAO,KAAK,KAC7C,KAAK,MAAQ,EACN,GACT,CAEA,KAAKC,EAAqB,CACxB,KAAK,SAASA,GAAO,GACrB,KAAK,MAAQ,CACf,CAEA,KAAKC,EAAyB,CAC5BA,EAAM,QAASJ,GAAS,KAAK,KAAKA,CAAI,CAAC,CACzC,CAEA,OAAc,CACZ,IAAMK,EAAW,6BAA6B,MAAM,EAAE,EAChDC,EAAS,KAAK,SAAS,IAAKpB,GAAU,CAC1C,OAAQA,EAAO,CACb,IAAK,GACH,MAAO,IACT,IAAK,GACH,MAAO,IACT,IAAK,GACH,MAAO,GACX,CACF,CAAC,EACD,QAAS,EAAI,EAAG,EAAI,KAAK,OAAQ,IAC/B,QAAQ,IACN,MAAM,KAAK,OAAS,GAAG,SAAS,EAAI,OAAO,OAAO,CAAC,KAAKoB,EACrD,MAAM,EAAI,KAAK,OAAQ,EAAI,GAAK,KAAK,KAAK,EAC1C,KAAK,GAAG,IACb,EAEF,IAAIC,EAAM,GACJC,EAAM,SAEZD,GAAOC,EAAM,IAAI,OAAO,KAAK,MAAQ,EAAI,CAAC,EAAI;AAAA,EAC9CD,GAAOC,EAAM,IAAMH,EAAS,MAAM,EAAG,KAAK,KAAK,EAAE,KAAK,GAAG,EAAI;AAAA,EAC7D,QAAQ,IAAIE,CAAG,EACf,QAAQ,IAAI,SAAS,KAAK,OAAS,EAAI,IAAM,KAAK,CACpD,CACF,EAEOE,EAAQ3B,EC/HR,SAAS4B,EAAOC,EAAUC,EAAe,CAC9C,IAAMC,EAAQC,EAAQH,EAAE,KAAK,EACzBI,EAAY,KACZC,EAAWH,EAAM,GAEjBI,EAAQ,KACRC,EAAO,IAEX,QAAWC,KAAQN,EAAO,CACxBF,EAAE,KAAKQ,CAAI,EACX,IAAMC,EAAQ,CAACC,EAAQV,EAAGC,EAAQ,EAAG,CAACM,EAAM,CAACD,CAAK,EAClDN,EAAE,KAAKQ,CAAI,EACPC,EAAQL,IACVA,EAAYK,EACZJ,EAAWG,EAEf,CACA,OAAOH,CACT,CAEA,SAASK,EAAQC,EAAcV,EAAeK,EAAeC,EAAsB,CACjF,GAAII,EAAM,QAAUV,IAAU,EAC5B,OAAIU,EAAM,SAAW,GAAW,EAEvBA,EAAM,SAAWA,EAAM,KAAO,IAAM,KAG/C,IAAIP,EAAY,KAChB,QAAWI,KAAQG,EAAM,MAAO,CAC9BA,EAAM,KAAKH,CAAI,EACf,IAAMC,EAAQ,CAACC,EAAQC,EAAOV,EAAQ,EAAG,CAACM,EAAM,CAACD,CAAK,EAItD,GAHAK,EAAM,KAAKH,CAAI,EACfJ,EAAY,KAAK,IAAIK,EAAOL,CAAS,EACrCE,EAAQ,KAAK,IAAIA,EAAOG,CAAK,EACzBH,GAASC,EAAM,KACrB,CACA,OAAOH,CACT,CAEA,SAASD,EAAQD,EAAmB,CAClC,QAASU,EAAIV,EAAM,OAAS,EAAGU,EAAI,EAAGA,IAAK,CACzC,IAAMC,EAAI,KAAK,MAAM,KAAK,OAAO,GAAKD,EAAI,EAAE,EAC5C,CAACV,EAAMU,GAAIV,EAAMW,EAAE,EAAI,CAACX,EAAMW,GAAIX,EAAMU,EAAE,CAC5C,CACA,OAAOV,CACT,CAEA,IAAOY,EAAQf,EC5Cf,IAAMgB,EAAO,CACX,MAAOC,EACP,OAAQC,CACV,EAEOC,EAAQH",
  "names": ["defaults", "Board", "options", "__publicField", "acc", "stone", "index", "width", "height", "winLength", "internal", "check", "x", "y", "dx", "dy", "first", "i", "winner", "move", "row", "col", "pos", "moves", "alphabet", "output", "str", "gap", "board_default", "search", "b", "depth", "moves", "shuffle", "bestScore", "bestMove", "alpha", "beta", "move", "score", "negamax", "board", "i", "j", "engine_default", "Game", "board_default", "engine_default", "src_default"]
}
